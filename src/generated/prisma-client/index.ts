// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  activity: (where?: ActivityWhereInput) => Promise<boolean>;
  activitySkill: (where?: ActivitySkillWhereInput) => Promise<boolean>;
  profile: (where?: ProfileWhereInput) => Promise<boolean>;
  project: (where?: ProjectWhereInput) => Promise<boolean>;
  skill: (where?: SkillWhereInput) => Promise<boolean>;
  userSkill: (where?: UserSkillWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  activity: (where: ActivityWhereUniqueInput) => ActivityNullablePromise;
  activities: (args?: {
    where?: ActivityWhereInput;
    orderBy?: ActivityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Activity>;
  activitiesConnection: (args?: {
    where?: ActivityWhereInput;
    orderBy?: ActivityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ActivityConnectionPromise;
  activitySkill: (
    where: ActivitySkillWhereUniqueInput
  ) => ActivitySkillNullablePromise;
  activitySkills: (args?: {
    where?: ActivitySkillWhereInput;
    orderBy?: ActivitySkillOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ActivitySkill>;
  activitySkillsConnection: (args?: {
    where?: ActivitySkillWhereInput;
    orderBy?: ActivitySkillOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ActivitySkillConnectionPromise;
  profile: (where: ProfileWhereUniqueInput) => ProfileNullablePromise;
  profiles: (args?: {
    where?: ProfileWhereInput;
    orderBy?: ProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Profile>;
  profilesConnection: (args?: {
    where?: ProfileWhereInput;
    orderBy?: ProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProfileConnectionPromise;
  project: (where: ProjectWhereUniqueInput) => ProjectNullablePromise;
  projects: (args?: {
    where?: ProjectWhereInput;
    orderBy?: ProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Project>;
  projectsConnection: (args?: {
    where?: ProjectWhereInput;
    orderBy?: ProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProjectConnectionPromise;
  skill: (where: SkillWhereUniqueInput) => SkillNullablePromise;
  skills: (args?: {
    where?: SkillWhereInput;
    orderBy?: SkillOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Skill>;
  skillsConnection: (args?: {
    where?: SkillWhereInput;
    orderBy?: SkillOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SkillConnectionPromise;
  userSkill: (where: UserSkillWhereUniqueInput) => UserSkillNullablePromise;
  userSkills: (args?: {
    where?: UserSkillWhereInput;
    orderBy?: UserSkillOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<UserSkill>;
  userSkillsConnection: (args?: {
    where?: UserSkillWhereInput;
    orderBy?: UserSkillOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserSkillConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createActivity: (data: ActivityCreateInput) => ActivityPromise;
  updateActivity: (args: {
    data: ActivityUpdateInput;
    where: ActivityWhereUniqueInput;
  }) => ActivityPromise;
  updateManyActivities: (args: {
    data: ActivityUpdateManyMutationInput;
    where?: ActivityWhereInput;
  }) => BatchPayloadPromise;
  upsertActivity: (args: {
    where: ActivityWhereUniqueInput;
    create: ActivityCreateInput;
    update: ActivityUpdateInput;
  }) => ActivityPromise;
  deleteActivity: (where: ActivityWhereUniqueInput) => ActivityPromise;
  deleteManyActivities: (where?: ActivityWhereInput) => BatchPayloadPromise;
  createActivitySkill: (data: ActivitySkillCreateInput) => ActivitySkillPromise;
  updateActivitySkill: (args: {
    data: ActivitySkillUpdateInput;
    where: ActivitySkillWhereUniqueInput;
  }) => ActivitySkillPromise;
  updateManyActivitySkills: (args: {
    data: ActivitySkillUpdateManyMutationInput;
    where?: ActivitySkillWhereInput;
  }) => BatchPayloadPromise;
  upsertActivitySkill: (args: {
    where: ActivitySkillWhereUniqueInput;
    create: ActivitySkillCreateInput;
    update: ActivitySkillUpdateInput;
  }) => ActivitySkillPromise;
  deleteActivitySkill: (
    where: ActivitySkillWhereUniqueInput
  ) => ActivitySkillPromise;
  deleteManyActivitySkills: (
    where?: ActivitySkillWhereInput
  ) => BatchPayloadPromise;
  createProfile: (data: ProfileCreateInput) => ProfilePromise;
  updateProfile: (args: {
    data: ProfileUpdateInput;
    where: ProfileWhereUniqueInput;
  }) => ProfilePromise;
  updateManyProfiles: (args: {
    data: ProfileUpdateManyMutationInput;
    where?: ProfileWhereInput;
  }) => BatchPayloadPromise;
  upsertProfile: (args: {
    where: ProfileWhereUniqueInput;
    create: ProfileCreateInput;
    update: ProfileUpdateInput;
  }) => ProfilePromise;
  deleteProfile: (where: ProfileWhereUniqueInput) => ProfilePromise;
  deleteManyProfiles: (where?: ProfileWhereInput) => BatchPayloadPromise;
  createProject: (data: ProjectCreateInput) => ProjectPromise;
  updateProject: (args: {
    data: ProjectUpdateInput;
    where: ProjectWhereUniqueInput;
  }) => ProjectPromise;
  updateManyProjects: (args: {
    data: ProjectUpdateManyMutationInput;
    where?: ProjectWhereInput;
  }) => BatchPayloadPromise;
  upsertProject: (args: {
    where: ProjectWhereUniqueInput;
    create: ProjectCreateInput;
    update: ProjectUpdateInput;
  }) => ProjectPromise;
  deleteProject: (where: ProjectWhereUniqueInput) => ProjectPromise;
  deleteManyProjects: (where?: ProjectWhereInput) => BatchPayloadPromise;
  createSkill: (data: SkillCreateInput) => SkillPromise;
  updateSkill: (args: {
    data: SkillUpdateInput;
    where: SkillWhereUniqueInput;
  }) => SkillPromise;
  updateManySkills: (args: {
    data: SkillUpdateManyMutationInput;
    where?: SkillWhereInput;
  }) => BatchPayloadPromise;
  upsertSkill: (args: {
    where: SkillWhereUniqueInput;
    create: SkillCreateInput;
    update: SkillUpdateInput;
  }) => SkillPromise;
  deleteSkill: (where: SkillWhereUniqueInput) => SkillPromise;
  deleteManySkills: (where?: SkillWhereInput) => BatchPayloadPromise;
  createUserSkill: (data: UserSkillCreateInput) => UserSkillPromise;
  updateUserSkill: (args: {
    data: UserSkillUpdateInput;
    where: UserSkillWhereUniqueInput;
  }) => UserSkillPromise;
  updateManyUserSkills: (args: {
    data: UserSkillUpdateManyMutationInput;
    where?: UserSkillWhereInput;
  }) => BatchPayloadPromise;
  upsertUserSkill: (args: {
    where: UserSkillWhereUniqueInput;
    create: UserSkillCreateInput;
    update: UserSkillUpdateInput;
  }) => UserSkillPromise;
  deleteUserSkill: (where: UserSkillWhereUniqueInput) => UserSkillPromise;
  deleteManyUserSkills: (where?: UserSkillWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  activity: (
    where?: ActivitySubscriptionWhereInput
  ) => ActivitySubscriptionPayloadSubscription;
  activitySkill: (
    where?: ActivitySkillSubscriptionWhereInput
  ) => ActivitySkillSubscriptionPayloadSubscription;
  profile: (
    where?: ProfileSubscriptionWhereInput
  ) => ProfileSubscriptionPayloadSubscription;
  project: (
    where?: ProjectSubscriptionWhereInput
  ) => ProjectSubscriptionPayloadSubscription;
  skill: (
    where?: SkillSubscriptionWhereInput
  ) => SkillSubscriptionPayloadSubscription;
  userSkill: (
    where?: UserSkillSubscriptionWhereInput
  ) => UserSkillSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ActivityOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "startDate_ASC"
  | "startDate_DESC"
  | "endDate_ASC"
  | "endDate_DESC";

export type UserSkillOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "level_ASC"
  | "level_DESC";

export type ActivitySkillOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "level_ASC"
  | "level_DESC";

export type ProfileOrderByInput =
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "title_ASC"
  | "title_DESC"
  | "user_ASC"
  | "user_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ProjectOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "startDate_ASC"
  | "startDate_DESC"
  | "endDate_ASC"
  | "endDate_DESC";

export type SkillOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface ActivitySkillUpdateWithoutOwnerDataInput {
  level?: Maybe<Int>;
  skill?: Maybe<SkillUpdateOneRequiredInput>;
}

export type ActivityWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ActivitySkillScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  level?: Maybe<Int>;
  level_not?: Maybe<Int>;
  level_in?: Maybe<Int[] | Int>;
  level_not_in?: Maybe<Int[] | Int>;
  level_lt?: Maybe<Int>;
  level_lte?: Maybe<Int>;
  level_gt?: Maybe<Int>;
  level_gte?: Maybe<Int>;
  AND?: Maybe<ActivitySkillScalarWhereInput[] | ActivitySkillScalarWhereInput>;
  OR?: Maybe<ActivitySkillScalarWhereInput[] | ActivitySkillScalarWhereInput>;
  NOT?: Maybe<ActivitySkillScalarWhereInput[] | ActivitySkillScalarWhereInput>;
}

export interface ProfileWhereInput {
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  user?: Maybe<ID_Input>;
  user_not?: Maybe<ID_Input>;
  user_in?: Maybe<ID_Input[] | ID_Input>;
  user_not_in?: Maybe<ID_Input[] | ID_Input>;
  user_lt?: Maybe<ID_Input>;
  user_lte?: Maybe<ID_Input>;
  user_gt?: Maybe<ID_Input>;
  user_gte?: Maybe<ID_Input>;
  user_contains?: Maybe<ID_Input>;
  user_not_contains?: Maybe<ID_Input>;
  user_starts_with?: Maybe<ID_Input>;
  user_not_starts_with?: Maybe<ID_Input>;
  user_ends_with?: Maybe<ID_Input>;
  user_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  activities_every?: Maybe<ActivityWhereInput>;
  activities_some?: Maybe<ActivityWhereInput>;
  activities_none?: Maybe<ActivityWhereInput>;
  skills_every?: Maybe<UserSkillWhereInput>;
  skills_some?: Maybe<UserSkillWhereInput>;
  skills_none?: Maybe<UserSkillWhereInput>;
  AND?: Maybe<ProfileWhereInput[] | ProfileWhereInput>;
  OR?: Maybe<ProfileWhereInput[] | ProfileWhereInput>;
  NOT?: Maybe<ProfileWhereInput[] | ProfileWhereInput>;
}

export interface SkillCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface ActivityUpdateOneRequiredWithoutSkillsInput {
  create?: Maybe<ActivityCreateWithoutSkillsInput>;
  update?: Maybe<ActivityUpdateWithoutSkillsDataInput>;
  upsert?: Maybe<ActivityUpsertWithoutSkillsInput>;
  connect?: Maybe<ActivityWhereUniqueInput>;
}

export interface UserSkillCreateManyWithoutOwnerInput {
  create?: Maybe<
    UserSkillCreateWithoutOwnerInput[] | UserSkillCreateWithoutOwnerInput
  >;
  connect?: Maybe<UserSkillWhereUniqueInput[] | UserSkillWhereUniqueInput>;
}

export interface ActivitySkillUpdateManyWithWhereNestedInput {
  where: ActivitySkillScalarWhereInput;
  data: ActivitySkillUpdateManyDataInput;
}

export interface UserSkillCreateWithoutOwnerInput {
  id?: Maybe<ID_Input>;
  level: Int;
  skill: SkillCreateOneInput;
}

export interface ProjectWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  manager?: Maybe<ProfileWhereInput>;
  startDate?: Maybe<DateTimeInput>;
  startDate_not?: Maybe<DateTimeInput>;
  startDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startDate_lt?: Maybe<DateTimeInput>;
  startDate_lte?: Maybe<DateTimeInput>;
  startDate_gt?: Maybe<DateTimeInput>;
  startDate_gte?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  endDate_not?: Maybe<DateTimeInput>;
  endDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endDate_lt?: Maybe<DateTimeInput>;
  endDate_lte?: Maybe<DateTimeInput>;
  endDate_gt?: Maybe<DateTimeInput>;
  endDate_gte?: Maybe<DateTimeInput>;
  activities_every?: Maybe<ActivityWhereInput>;
  activities_some?: Maybe<ActivityWhereInput>;
  activities_none?: Maybe<ActivityWhereInput>;
  AND?: Maybe<ProjectWhereInput[] | ProjectWhereInput>;
  OR?: Maybe<ProjectWhereInput[] | ProjectWhereInput>;
  NOT?: Maybe<ProjectWhereInput[] | ProjectWhereInput>;
}

export interface ProfileCreateOneWithoutActivitiesInput {
  create?: Maybe<ProfileCreateWithoutActivitiesInput>;
  connect?: Maybe<ProfileWhereUniqueInput>;
}

export interface UserSkillSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserSkillWhereInput>;
  AND?: Maybe<
    UserSkillSubscriptionWhereInput[] | UserSkillSubscriptionWhereInput
  >;
  OR?: Maybe<
    UserSkillSubscriptionWhereInput[] | UserSkillSubscriptionWhereInput
  >;
  NOT?: Maybe<
    UserSkillSubscriptionWhereInput[] | UserSkillSubscriptionWhereInput
  >;
}

export interface ProfileCreateWithoutActivitiesInput {
  firstName: String;
  lastName: String;
  title?: Maybe<String>;
  user?: Maybe<ID_Input>;
  skills?: Maybe<UserSkillCreateManyWithoutOwnerInput>;
}

export interface ProjectSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProjectWhereInput>;
  AND?: Maybe<ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput>;
  OR?: Maybe<ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput>;
  NOT?: Maybe<ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput>;
}

export interface ActivityUpdateInput {
  name?: Maybe<String>;
  project?: Maybe<ProjectUpdateOneRequiredWithoutActivitiesInput>;
  user?: Maybe<ProfileUpdateOneRequiredWithoutActivitiesInput>;
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  skills?: Maybe<ActivitySkillUpdateManyWithoutOwnerInput>;
}

export interface ActivitySkillSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ActivitySkillWhereInput>;
  AND?: Maybe<
    ActivitySkillSubscriptionWhereInput[] | ActivitySkillSubscriptionWhereInput
  >;
  OR?: Maybe<
    ActivitySkillSubscriptionWhereInput[] | ActivitySkillSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ActivitySkillSubscriptionWhereInput[] | ActivitySkillSubscriptionWhereInput
  >;
}

export interface ProjectUpdateOneRequiredWithoutActivitiesInput {
  create?: Maybe<ProjectCreateWithoutActivitiesInput>;
  update?: Maybe<ProjectUpdateWithoutActivitiesDataInput>;
  upsert?: Maybe<ProjectUpsertWithoutActivitiesInput>;
  connect?: Maybe<ProjectWhereUniqueInput>;
}

export interface UserSkillUpdateManyMutationInput {
  level?: Maybe<Int>;
}

export interface ProjectUpdateWithoutActivitiesDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  manager?: Maybe<ProfileUpdateOneRequiredInput>;
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
}

export interface ProfileUpdateWithoutSkillsDataInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  title?: Maybe<String>;
  activities?: Maybe<ActivityUpdateManyWithoutUserInput>;
}

export interface ProfileUpdateOneRequiredInput {
  create?: Maybe<ProfileCreateInput>;
  update?: Maybe<ProfileUpdateDataInput>;
  upsert?: Maybe<ProfileUpsertNestedInput>;
  connect?: Maybe<ProfileWhereUniqueInput>;
}

export interface ProfileUpdateOneRequiredWithoutSkillsInput {
  create?: Maybe<ProfileCreateWithoutSkillsInput>;
  update?: Maybe<ProfileUpdateWithoutSkillsDataInput>;
  upsert?: Maybe<ProfileUpsertWithoutSkillsInput>;
  connect?: Maybe<ProfileWhereUniqueInput>;
}

export interface ProfileUpdateDataInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  title?: Maybe<String>;
  activities?: Maybe<ActivityUpdateManyWithoutUserInput>;
  skills?: Maybe<UserSkillUpdateManyWithoutOwnerInput>;
}

export interface ProfileCreateWithoutSkillsInput {
  firstName: String;
  lastName: String;
  title?: Maybe<String>;
  user?: Maybe<ID_Input>;
  activities?: Maybe<ActivityCreateManyWithoutUserInput>;
}

export interface ActivityUpdateManyWithoutUserInput {
  create?: Maybe<
    ActivityCreateWithoutUserInput[] | ActivityCreateWithoutUserInput
  >;
  delete?: Maybe<ActivityWhereUniqueInput[] | ActivityWhereUniqueInput>;
  connect?: Maybe<ActivityWhereUniqueInput[] | ActivityWhereUniqueInput>;
  set?: Maybe<ActivityWhereUniqueInput[] | ActivityWhereUniqueInput>;
  disconnect?: Maybe<ActivityWhereUniqueInput[] | ActivityWhereUniqueInput>;
  update?: Maybe<
    | ActivityUpdateWithWhereUniqueWithoutUserInput[]
    | ActivityUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | ActivityUpsertWithWhereUniqueWithoutUserInput[]
    | ActivityUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<ActivityScalarWhereInput[] | ActivityScalarWhereInput>;
  updateMany?: Maybe<
    | ActivityUpdateManyWithWhereNestedInput[]
    | ActivityUpdateManyWithWhereNestedInput
  >;
}

export interface ProfileCreateOneWithoutSkillsInput {
  create?: Maybe<ProfileCreateWithoutSkillsInput>;
  connect?: Maybe<ProfileWhereUniqueInput>;
}

export interface ActivityUpdateWithWhereUniqueWithoutUserInput {
  where: ActivityWhereUniqueInput;
  data: ActivityUpdateWithoutUserDataInput;
}

export interface SkillUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface ActivityUpdateWithoutUserDataInput {
  name?: Maybe<String>;
  project?: Maybe<ProjectUpdateOneRequiredWithoutActivitiesInput>;
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  skills?: Maybe<ActivitySkillUpdateManyWithoutOwnerInput>;
}

export type ProjectWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export interface ActivitySkillUpdateManyWithoutOwnerInput {
  create?: Maybe<
    | ActivitySkillCreateWithoutOwnerInput[]
    | ActivitySkillCreateWithoutOwnerInput
  >;
  delete?: Maybe<
    ActivitySkillWhereUniqueInput[] | ActivitySkillWhereUniqueInput
  >;
  connect?: Maybe<
    ActivitySkillWhereUniqueInput[] | ActivitySkillWhereUniqueInput
  >;
  set?: Maybe<ActivitySkillWhereUniqueInput[] | ActivitySkillWhereUniqueInput>;
  disconnect?: Maybe<
    ActivitySkillWhereUniqueInput[] | ActivitySkillWhereUniqueInput
  >;
  update?: Maybe<
    | ActivitySkillUpdateWithWhereUniqueWithoutOwnerInput[]
    | ActivitySkillUpdateWithWhereUniqueWithoutOwnerInput
  >;
  upsert?: Maybe<
    | ActivitySkillUpsertWithWhereUniqueWithoutOwnerInput[]
    | ActivitySkillUpsertWithWhereUniqueWithoutOwnerInput
  >;
  deleteMany?: Maybe<
    ActivitySkillScalarWhereInput[] | ActivitySkillScalarWhereInput
  >;
  updateMany?: Maybe<
    | ActivitySkillUpdateManyWithWhereNestedInput[]
    | ActivitySkillUpdateManyWithWhereNestedInput
  >;
}

export interface ActivityUpsertWithWhereUniqueWithoutProjectInput {
  where: ActivityWhereUniqueInput;
  update: ActivityUpdateWithoutProjectDataInput;
  create: ActivityCreateWithoutProjectInput;
}

export interface ActivitySkillUpdateWithWhereUniqueWithoutOwnerInput {
  where: ActivitySkillWhereUniqueInput;
  data: ActivitySkillUpdateWithoutOwnerDataInput;
}

export interface ActivityUpdateWithWhereUniqueWithoutProjectInput {
  where: ActivityWhereUniqueInput;
  data: ActivityUpdateWithoutProjectDataInput;
}

export interface ActivitySkillUpdateManyMutationInput {
  level?: Maybe<Int>;
}

export interface ActivityUpdateManyWithoutProjectInput {
  create?: Maybe<
    ActivityCreateWithoutProjectInput[] | ActivityCreateWithoutProjectInput
  >;
  delete?: Maybe<ActivityWhereUniqueInput[] | ActivityWhereUniqueInput>;
  connect?: Maybe<ActivityWhereUniqueInput[] | ActivityWhereUniqueInput>;
  set?: Maybe<ActivityWhereUniqueInput[] | ActivityWhereUniqueInput>;
  disconnect?: Maybe<ActivityWhereUniqueInput[] | ActivityWhereUniqueInput>;
  update?: Maybe<
    | ActivityUpdateWithWhereUniqueWithoutProjectInput[]
    | ActivityUpdateWithWhereUniqueWithoutProjectInput
  >;
  upsert?: Maybe<
    | ActivityUpsertWithWhereUniqueWithoutProjectInput[]
    | ActivityUpsertWithWhereUniqueWithoutProjectInput
  >;
  deleteMany?: Maybe<ActivityScalarWhereInput[] | ActivityScalarWhereInput>;
  updateMany?: Maybe<
    | ActivityUpdateManyWithWhereNestedInput[]
    | ActivityUpdateManyWithWhereNestedInput
  >;
}

export interface SkillUpdateOneRequiredInput {
  create?: Maybe<SkillCreateInput>;
  update?: Maybe<SkillUpdateDataInput>;
  upsert?: Maybe<SkillUpsertNestedInput>;
  connect?: Maybe<SkillWhereUniqueInput>;
}

export interface ActivityCreateWithoutProjectInput {
  id?: Maybe<ID_Input>;
  name: String;
  user: ProfileCreateOneWithoutActivitiesInput;
  startDate: DateTimeInput;
  endDate?: Maybe<DateTimeInput>;
  skills?: Maybe<ActivitySkillCreateManyWithoutOwnerInput>;
}

export interface SkillUpdateDataInput {
  name?: Maybe<String>;
}

export type UserSkillWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface SkillUpsertNestedInput {
  update: SkillUpdateDataInput;
  create: SkillCreateInput;
}

export interface ProfileUpdateManyMutationInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  title?: Maybe<String>;
}

export interface ActivitySkillUpsertWithWhereUniqueWithoutOwnerInput {
  where: ActivitySkillWhereUniqueInput;
  update: ActivitySkillUpdateWithoutOwnerDataInput;
  create: ActivitySkillCreateWithoutOwnerInput;
}

export interface ProjectCreateOneWithoutActivitiesInput {
  create?: Maybe<ProjectCreateWithoutActivitiesInput>;
  connect?: Maybe<ProjectWhereUniqueInput>;
}

export interface UserSkillWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  level?: Maybe<Int>;
  level_not?: Maybe<Int>;
  level_in?: Maybe<Int[] | Int>;
  level_not_in?: Maybe<Int[] | Int>;
  level_lt?: Maybe<Int>;
  level_lte?: Maybe<Int>;
  level_gt?: Maybe<Int>;
  level_gte?: Maybe<Int>;
  skill?: Maybe<SkillWhereInput>;
  owner?: Maybe<ProfileWhereInput>;
  AND?: Maybe<UserSkillWhereInput[] | UserSkillWhereInput>;
  OR?: Maybe<UserSkillWhereInput[] | UserSkillWhereInput>;
  NOT?: Maybe<UserSkillWhereInput[] | UserSkillWhereInput>;
}

export interface ProfileCreateOneInput {
  create?: Maybe<ProfileCreateInput>;
  connect?: Maybe<ProfileWhereUniqueInput>;
}

export interface SkillWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<SkillWhereInput[] | SkillWhereInput>;
  OR?: Maybe<SkillWhereInput[] | SkillWhereInput>;
  NOT?: Maybe<SkillWhereInput[] | SkillWhereInput>;
}

export interface ActivityCreateManyWithoutUserInput {
  create?: Maybe<
    ActivityCreateWithoutUserInput[] | ActivityCreateWithoutUserInput
  >;
  connect?: Maybe<ActivityWhereUniqueInput[] | ActivityWhereUniqueInput>;
}

export interface ActivitySkillUpdateManyDataInput {
  level?: Maybe<Int>;
}

export interface ActivitySkillCreateManyWithoutOwnerInput {
  create?: Maybe<
    | ActivitySkillCreateWithoutOwnerInput[]
    | ActivitySkillCreateWithoutOwnerInput
  >;
  connect?: Maybe<
    ActivitySkillWhereUniqueInput[] | ActivitySkillWhereUniqueInput
  >;
}

export interface ActivityUpsertWithWhereUniqueWithoutUserInput {
  where: ActivityWhereUniqueInput;
  update: ActivityUpdateWithoutUserDataInput;
  create: ActivityCreateWithoutUserInput;
}

export interface SkillCreateOneInput {
  create?: Maybe<SkillCreateInput>;
  connect?: Maybe<SkillWhereUniqueInput>;
}

export interface ActivityScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  startDate?: Maybe<DateTimeInput>;
  startDate_not?: Maybe<DateTimeInput>;
  startDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startDate_lt?: Maybe<DateTimeInput>;
  startDate_lte?: Maybe<DateTimeInput>;
  startDate_gt?: Maybe<DateTimeInput>;
  startDate_gte?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  endDate_not?: Maybe<DateTimeInput>;
  endDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endDate_lt?: Maybe<DateTimeInput>;
  endDate_lte?: Maybe<DateTimeInput>;
  endDate_gt?: Maybe<DateTimeInput>;
  endDate_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ActivityScalarWhereInput[] | ActivityScalarWhereInput>;
  OR?: Maybe<ActivityScalarWhereInput[] | ActivityScalarWhereInput>;
  NOT?: Maybe<ActivityScalarWhereInput[] | ActivityScalarWhereInput>;
}

export interface ActivityWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  project?: Maybe<ProjectWhereInput>;
  user?: Maybe<ProfileWhereInput>;
  startDate?: Maybe<DateTimeInput>;
  startDate_not?: Maybe<DateTimeInput>;
  startDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startDate_lt?: Maybe<DateTimeInput>;
  startDate_lte?: Maybe<DateTimeInput>;
  startDate_gt?: Maybe<DateTimeInput>;
  startDate_gte?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  endDate_not?: Maybe<DateTimeInput>;
  endDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endDate_lt?: Maybe<DateTimeInput>;
  endDate_lte?: Maybe<DateTimeInput>;
  endDate_gt?: Maybe<DateTimeInput>;
  endDate_gte?: Maybe<DateTimeInput>;
  skills_every?: Maybe<ActivitySkillWhereInput>;
  skills_some?: Maybe<ActivitySkillWhereInput>;
  skills_none?: Maybe<ActivitySkillWhereInput>;
  AND?: Maybe<ActivityWhereInput[] | ActivityWhereInput>;
  OR?: Maybe<ActivityWhereInput[] | ActivityWhereInput>;
  NOT?: Maybe<ActivityWhereInput[] | ActivityWhereInput>;
}

export interface ActivityUpdateManyWithWhereNestedInput {
  where: ActivityScalarWhereInput;
  data: ActivityUpdateManyDataInput;
}

export interface ProfileSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProfileWhereInput>;
  AND?: Maybe<ProfileSubscriptionWhereInput[] | ProfileSubscriptionWhereInput>;
  OR?: Maybe<ProfileSubscriptionWhereInput[] | ProfileSubscriptionWhereInput>;
  NOT?: Maybe<ProfileSubscriptionWhereInput[] | ProfileSubscriptionWhereInput>;
}

export interface ActivityUpdateManyDataInput {
  name?: Maybe<String>;
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
}

export interface ProfileUpsertWithoutSkillsInput {
  update: ProfileUpdateWithoutSkillsDataInput;
  create: ProfileCreateWithoutSkillsInput;
}

export interface UserSkillUpdateManyWithoutOwnerInput {
  create?: Maybe<
    UserSkillCreateWithoutOwnerInput[] | UserSkillCreateWithoutOwnerInput
  >;
  delete?: Maybe<UserSkillWhereUniqueInput[] | UserSkillWhereUniqueInput>;
  connect?: Maybe<UserSkillWhereUniqueInput[] | UserSkillWhereUniqueInput>;
  set?: Maybe<UserSkillWhereUniqueInput[] | UserSkillWhereUniqueInput>;
  disconnect?: Maybe<UserSkillWhereUniqueInput[] | UserSkillWhereUniqueInput>;
  update?: Maybe<
    | UserSkillUpdateWithWhereUniqueWithoutOwnerInput[]
    | UserSkillUpdateWithWhereUniqueWithoutOwnerInput
  >;
  upsert?: Maybe<
    | UserSkillUpsertWithWhereUniqueWithoutOwnerInput[]
    | UserSkillUpsertWithWhereUniqueWithoutOwnerInput
  >;
  deleteMany?: Maybe<UserSkillScalarWhereInput[] | UserSkillScalarWhereInput>;
  updateMany?: Maybe<
    | UserSkillUpdateManyWithWhereNestedInput[]
    | UserSkillUpdateManyWithWhereNestedInput
  >;
}

export interface UserSkillUpdateInput {
  level?: Maybe<Int>;
  skill?: Maybe<SkillUpdateOneRequiredInput>;
  owner?: Maybe<ProfileUpdateOneRequiredWithoutSkillsInput>;
}

export interface UserSkillUpdateWithWhereUniqueWithoutOwnerInput {
  where: UserSkillWhereUniqueInput;
  data: UserSkillUpdateWithoutOwnerDataInput;
}

export interface UserSkillCreateInput {
  id?: Maybe<ID_Input>;
  level: Int;
  skill: SkillCreateOneInput;
  owner: ProfileCreateOneWithoutSkillsInput;
}

export interface UserSkillUpdateWithoutOwnerDataInput {
  level?: Maybe<Int>;
  skill?: Maybe<SkillUpdateOneRequiredInput>;
}

export interface ProjectUpdateManyMutationInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
}

export interface UserSkillUpsertWithWhereUniqueWithoutOwnerInput {
  where: UserSkillWhereUniqueInput;
  update: UserSkillUpdateWithoutOwnerDataInput;
  create: UserSkillCreateWithoutOwnerInput;
}

export type SkillWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export interface UserSkillScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  level?: Maybe<Int>;
  level_not?: Maybe<Int>;
  level_in?: Maybe<Int[] | Int>;
  level_not_in?: Maybe<Int[] | Int>;
  level_lt?: Maybe<Int>;
  level_lte?: Maybe<Int>;
  level_gt?: Maybe<Int>;
  level_gte?: Maybe<Int>;
  AND?: Maybe<UserSkillScalarWhereInput[] | UserSkillScalarWhereInput>;
  OR?: Maybe<UserSkillScalarWhereInput[] | UserSkillScalarWhereInput>;
  NOT?: Maybe<UserSkillScalarWhereInput[] | UserSkillScalarWhereInput>;
}

export interface ActivityCreateManyWithoutProjectInput {
  create?: Maybe<
    ActivityCreateWithoutProjectInput[] | ActivityCreateWithoutProjectInput
  >;
  connect?: Maybe<ActivityWhereUniqueInput[] | ActivityWhereUniqueInput>;
}

export interface UserSkillUpdateManyWithWhereNestedInput {
  where: UserSkillScalarWhereInput;
  data: UserSkillUpdateManyDataInput;
}

export interface ProfileUpdateInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  title?: Maybe<String>;
  activities?: Maybe<ActivityUpdateManyWithoutUserInput>;
  skills?: Maybe<UserSkillUpdateManyWithoutOwnerInput>;
}

export interface UserSkillUpdateManyDataInput {
  level?: Maybe<Int>;
}

export interface ProjectCreateWithoutActivitiesInput {
  id?: Maybe<ID_Input>;
  name: String;
  description: String;
  manager: ProfileCreateOneInput;
  startDate: DateTimeInput;
  endDate?: Maybe<DateTimeInput>;
}

export interface ProfileUpsertNestedInput {
  update: ProfileUpdateDataInput;
  create: ProfileCreateInput;
}

export interface ActivityCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  name: String;
  project: ProjectCreateOneWithoutActivitiesInput;
  startDate: DateTimeInput;
  endDate?: Maybe<DateTimeInput>;
  skills?: Maybe<ActivitySkillCreateManyWithoutOwnerInput>;
}

export interface ProjectUpsertWithoutActivitiesInput {
  update: ProjectUpdateWithoutActivitiesDataInput;
  create: ProjectCreateWithoutActivitiesInput;
}

export interface ActivitySkillWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  level?: Maybe<Int>;
  level_not?: Maybe<Int>;
  level_in?: Maybe<Int[] | Int>;
  level_not_in?: Maybe<Int[] | Int>;
  level_lt?: Maybe<Int>;
  level_lte?: Maybe<Int>;
  level_gt?: Maybe<Int>;
  level_gte?: Maybe<Int>;
  skill?: Maybe<SkillWhereInput>;
  owner?: Maybe<ActivityWhereInput>;
  AND?: Maybe<ActivitySkillWhereInput[] | ActivitySkillWhereInput>;
  OR?: Maybe<ActivitySkillWhereInput[] | ActivitySkillWhereInput>;
  NOT?: Maybe<ActivitySkillWhereInput[] | ActivitySkillWhereInput>;
}

export interface ProfileUpdateOneRequiredWithoutActivitiesInput {
  create?: Maybe<ProfileCreateWithoutActivitiesInput>;
  update?: Maybe<ProfileUpdateWithoutActivitiesDataInput>;
  upsert?: Maybe<ProfileUpsertWithoutActivitiesInput>;
  connect?: Maybe<ProfileWhereUniqueInput>;
}

export interface ActivitySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ActivityWhereInput>;
  AND?: Maybe<
    ActivitySubscriptionWhereInput[] | ActivitySubscriptionWhereInput
  >;
  OR?: Maybe<ActivitySubscriptionWhereInput[] | ActivitySubscriptionWhereInput>;
  NOT?: Maybe<
    ActivitySubscriptionWhereInput[] | ActivitySubscriptionWhereInput
  >;
}

export interface ProfileUpdateWithoutActivitiesDataInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  title?: Maybe<String>;
  skills?: Maybe<UserSkillUpdateManyWithoutOwnerInput>;
}

export type ProfileWhereUniqueInput = AtLeastOne<{
  user: Maybe<ID_Input>;
}>;

export interface ProfileUpsertWithoutActivitiesInput {
  update: ProfileUpdateWithoutActivitiesDataInput;
  create: ProfileCreateWithoutActivitiesInput;
}

export interface ActivityUpdateWithoutProjectDataInput {
  name?: Maybe<String>;
  user?: Maybe<ProfileUpdateOneRequiredWithoutActivitiesInput>;
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  skills?: Maybe<ActivitySkillUpdateManyWithoutOwnerInput>;
}

export interface ActivityUpdateManyMutationInput {
  name?: Maybe<String>;
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
}

export interface ProjectCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  description: String;
  manager: ProfileCreateOneInput;
  startDate: DateTimeInput;
  endDate?: Maybe<DateTimeInput>;
  activities?: Maybe<ActivityCreateManyWithoutProjectInput>;
}

export interface ActivityUpsertWithoutSkillsInput {
  update: ActivityUpdateWithoutSkillsDataInput;
  create: ActivityCreateWithoutSkillsInput;
}

export interface ProfileCreateInput {
  firstName: String;
  lastName: String;
  title?: Maybe<String>;
  user?: Maybe<ID_Input>;
  activities?: Maybe<ActivityCreateManyWithoutUserInput>;
  skills?: Maybe<UserSkillCreateManyWithoutOwnerInput>;
}

export interface ActivityUpdateWithoutSkillsDataInput {
  name?: Maybe<String>;
  project?: Maybe<ProjectUpdateOneRequiredWithoutActivitiesInput>;
  user?: Maybe<ProfileUpdateOneRequiredWithoutActivitiesInput>;
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
}

export interface SkillSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SkillWhereInput>;
  AND?: Maybe<SkillSubscriptionWhereInput[] | SkillSubscriptionWhereInput>;
  OR?: Maybe<SkillSubscriptionWhereInput[] | SkillSubscriptionWhereInput>;
  NOT?: Maybe<SkillSubscriptionWhereInput[] | SkillSubscriptionWhereInput>;
}

export interface ActivitySkillUpdateInput {
  level?: Maybe<Int>;
  skill?: Maybe<SkillUpdateOneRequiredInput>;
  owner?: Maybe<ActivityUpdateOneRequiredWithoutSkillsInput>;
}

export interface ActivityCreateWithoutSkillsInput {
  id?: Maybe<ID_Input>;
  name: String;
  project: ProjectCreateOneWithoutActivitiesInput;
  user: ProfileCreateOneWithoutActivitiesInput;
  startDate: DateTimeInput;
  endDate?: Maybe<DateTimeInput>;
}

export interface ActivityCreateOneWithoutSkillsInput {
  create?: Maybe<ActivityCreateWithoutSkillsInput>;
  connect?: Maybe<ActivityWhereUniqueInput>;
}

export interface ActivitySkillCreateInput {
  id?: Maybe<ID_Input>;
  level: Int;
  skill: SkillCreateOneInput;
  owner: ActivityCreateOneWithoutSkillsInput;
}

export type ActivitySkillWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ActivitySkillCreateWithoutOwnerInput {
  id?: Maybe<ID_Input>;
  level: Int;
  skill: SkillCreateOneInput;
}

export interface ActivityCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  project: ProjectCreateOneWithoutActivitiesInput;
  user: ProfileCreateOneWithoutActivitiesInput;
  startDate: DateTimeInput;
  endDate?: Maybe<DateTimeInput>;
  skills?: Maybe<ActivitySkillCreateManyWithoutOwnerInput>;
}

export interface ProjectUpdateInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  manager?: Maybe<ProfileUpdateOneRequiredInput>;
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  activities?: Maybe<ActivityUpdateManyWithoutProjectInput>;
}

export interface SkillUpdateInput {
  name?: Maybe<String>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserSkillPreviousValues {
  id: ID_Output;
  level: Int;
}

export interface UserSkillPreviousValuesPromise
  extends Promise<UserSkillPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  level: () => Promise<Int>;
}

export interface UserSkillPreviousValuesSubscription
  extends Promise<AsyncIterator<UserSkillPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  level: () => Promise<AsyncIterator<Int>>;
}

export interface ActivitySkillEdge {
  node: ActivitySkill;
  cursor: String;
}

export interface ActivitySkillEdgePromise
  extends Promise<ActivitySkillEdge>,
    Fragmentable {
  node: <T = ActivitySkillPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ActivitySkillEdgeSubscription
  extends Promise<AsyncIterator<ActivitySkillEdge>>,
    Fragmentable {
  node: <T = ActivitySkillSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Skill {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface SkillPromise extends Promise<Skill>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SkillSubscription
  extends Promise<AsyncIterator<Skill>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SkillNullablePromise
  extends Promise<Skill | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ActivitySkillConnection {
  pageInfo: PageInfo;
  edges: ActivitySkillEdge[];
}

export interface ActivitySkillConnectionPromise
  extends Promise<ActivitySkillConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ActivitySkillEdge>>() => T;
  aggregate: <T = AggregateActivitySkillPromise>() => T;
}

export interface ActivitySkillConnectionSubscription
  extends Promise<AsyncIterator<ActivitySkillConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ActivitySkillEdgeSubscription>>>() => T;
  aggregate: <T = AggregateActivitySkillSubscription>() => T;
}

export interface AggregateActivity {
  count: Int;
}

export interface AggregateActivityPromise
  extends Promise<AggregateActivity>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateActivitySubscription
  extends Promise<AsyncIterator<AggregateActivity>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateUserSkill {
  count: Int;
}

export interface AggregateUserSkillPromise
  extends Promise<AggregateUserSkill>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSkillSubscription
  extends Promise<AsyncIterator<AggregateUserSkill>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ActivityEdge {
  node: Activity;
  cursor: String;
}

export interface ActivityEdgePromise
  extends Promise<ActivityEdge>,
    Fragmentable {
  node: <T = ActivityPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ActivityEdgeSubscription
  extends Promise<AsyncIterator<ActivityEdge>>,
    Fragmentable {
  node: <T = ActivitySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserSkillConnection {
  pageInfo: PageInfo;
  edges: UserSkillEdge[];
}

export interface UserSkillConnectionPromise
  extends Promise<UserSkillConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserSkillEdge>>() => T;
  aggregate: <T = AggregateUserSkillPromise>() => T;
}

export interface UserSkillConnectionSubscription
  extends Promise<AsyncIterator<UserSkillConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserSkillEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSkillSubscription>() => T;
}

export interface SkillPreviousValues {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface SkillPreviousValuesPromise
  extends Promise<SkillPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SkillPreviousValuesSubscription
  extends Promise<AsyncIterator<SkillPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SkillEdge {
  node: Skill;
  cursor: String;
}

export interface SkillEdgePromise extends Promise<SkillEdge>, Fragmentable {
  node: <T = SkillPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SkillEdgeSubscription
  extends Promise<AsyncIterator<SkillEdge>>,
    Fragmentable {
  node: <T = SkillSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface UserSkill {
  id: ID_Output;
  level: Int;
}

export interface UserSkillPromise extends Promise<UserSkill>, Fragmentable {
  id: () => Promise<ID_Output>;
  level: () => Promise<Int>;
  skill: <T = SkillPromise>() => T;
  owner: <T = ProfilePromise>() => T;
}

export interface UserSkillSubscription
  extends Promise<AsyncIterator<UserSkill>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  level: () => Promise<AsyncIterator<Int>>;
  skill: <T = SkillSubscription>() => T;
  owner: <T = ProfileSubscription>() => T;
}

export interface UserSkillNullablePromise
  extends Promise<UserSkill | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  level: () => Promise<Int>;
  skill: <T = SkillPromise>() => T;
  owner: <T = ProfilePromise>() => T;
}

export interface Activity {
  id: ID_Output;
  name: String;
  startDate: DateTimeOutput;
  endDate?: DateTimeOutput;
}

export interface ActivityPromise extends Promise<Activity>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  project: <T = ProjectPromise>() => T;
  user: <T = ProfilePromise>() => T;
  startDate: () => Promise<DateTimeOutput>;
  endDate: () => Promise<DateTimeOutput>;
  skills: <T = FragmentableArray<ActivitySkill>>(args?: {
    where?: ActivitySkillWhereInput;
    orderBy?: ActivitySkillOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ActivitySubscription
  extends Promise<AsyncIterator<Activity>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  project: <T = ProjectSubscription>() => T;
  user: <T = ProfileSubscription>() => T;
  startDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  endDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  skills: <T = Promise<AsyncIterator<ActivitySkillSubscription>>>(args?: {
    where?: ActivitySkillWhereInput;
    orderBy?: ActivitySkillOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ActivityNullablePromise
  extends Promise<Activity | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  project: <T = ProjectPromise>() => T;
  user: <T = ProfilePromise>() => T;
  startDate: () => Promise<DateTimeOutput>;
  endDate: () => Promise<DateTimeOutput>;
  skills: <T = FragmentableArray<ActivitySkill>>(args?: {
    where?: ActivitySkillWhereInput;
    orderBy?: ActivitySkillOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ProjectEdge {
  node: Project;
  cursor: String;
}

export interface ProjectEdgePromise extends Promise<ProjectEdge>, Fragmentable {
  node: <T = ProjectPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProjectEdgeSubscription
  extends Promise<AsyncIterator<ProjectEdge>>,
    Fragmentable {
  node: <T = ProjectSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ActivitySubscriptionPayload {
  mutation: MutationType;
  node: Activity;
  updatedFields: String[];
  previousValues: ActivityPreviousValues;
}

export interface ActivitySubscriptionPayloadPromise
  extends Promise<ActivitySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ActivityPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ActivityPreviousValuesPromise>() => T;
}

export interface ActivitySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ActivitySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ActivitySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ActivityPreviousValuesSubscription>() => T;
}

export interface Project {
  id: ID_Output;
  name: String;
  description: String;
  startDate: DateTimeOutput;
  endDate?: DateTimeOutput;
}

export interface ProjectPromise extends Promise<Project>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  manager: <T = ProfilePromise>() => T;
  startDate: () => Promise<DateTimeOutput>;
  endDate: () => Promise<DateTimeOutput>;
  activities: <T = FragmentableArray<Activity>>(args?: {
    where?: ActivityWhereInput;
    orderBy?: ActivityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ProjectSubscription
  extends Promise<AsyncIterator<Project>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  manager: <T = ProfileSubscription>() => T;
  startDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  endDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  activities: <T = Promise<AsyncIterator<ActivitySubscription>>>(args?: {
    where?: ActivityWhereInput;
    orderBy?: ActivityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ProjectNullablePromise
  extends Promise<Project | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  manager: <T = ProfilePromise>() => T;
  startDate: () => Promise<DateTimeOutput>;
  endDate: () => Promise<DateTimeOutput>;
  activities: <T = FragmentableArray<Activity>>(args?: {
    where?: ActivityWhereInput;
    orderBy?: ActivityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ActivityPreviousValues {
  id: ID_Output;
  name: String;
  startDate: DateTimeOutput;
  endDate?: DateTimeOutput;
}

export interface ActivityPreviousValuesPromise
  extends Promise<ActivityPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  startDate: () => Promise<DateTimeOutput>;
  endDate: () => Promise<DateTimeOutput>;
}

export interface ActivityPreviousValuesSubscription
  extends Promise<AsyncIterator<ActivityPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  startDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  endDate: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProfileEdge {
  node: Profile;
  cursor: String;
}

export interface ProfileEdgePromise extends Promise<ProfileEdge>, Fragmentable {
  node: <T = ProfilePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProfileEdgeSubscription
  extends Promise<AsyncIterator<ProfileEdge>>,
    Fragmentable {
  node: <T = ProfileSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ActivityConnection {
  pageInfo: PageInfo;
  edges: ActivityEdge[];
}

export interface ActivityConnectionPromise
  extends Promise<ActivityConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ActivityEdge>>() => T;
  aggregate: <T = AggregateActivityPromise>() => T;
}

export interface ActivityConnectionSubscription
  extends Promise<AsyncIterator<ActivityConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ActivityEdgeSubscription>>>() => T;
  aggregate: <T = AggregateActivitySubscription>() => T;
}

export interface Profile {
  firstName: String;
  lastName: String;
  title?: String;
  user: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ProfilePromise extends Promise<Profile>, Fragmentable {
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  title: () => Promise<String>;
  user: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  activities: <T = FragmentableArray<Activity>>(args?: {
    where?: ActivityWhereInput;
    orderBy?: ActivityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  skills: <T = FragmentableArray<UserSkill>>(args?: {
    where?: UserSkillWhereInput;
    orderBy?: UserSkillOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ProfileSubscription
  extends Promise<AsyncIterator<Profile>>,
    Fragmentable {
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  user: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  activities: <T = Promise<AsyncIterator<ActivitySubscription>>>(args?: {
    where?: ActivityWhereInput;
    orderBy?: ActivityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  skills: <T = Promise<AsyncIterator<UserSkillSubscription>>>(args?: {
    where?: UserSkillWhereInput;
    orderBy?: UserSkillOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ProfileNullablePromise
  extends Promise<Profile | null>,
    Fragmentable {
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  title: () => Promise<String>;
  user: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  activities: <T = FragmentableArray<Activity>>(args?: {
    where?: ActivityWhereInput;
    orderBy?: ActivityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  skills: <T = FragmentableArray<UserSkill>>(args?: {
    where?: UserSkillWhereInput;
    orderBy?: UserSkillOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ActivitySkillSubscriptionPayload {
  mutation: MutationType;
  node: ActivitySkill;
  updatedFields: String[];
  previousValues: ActivitySkillPreviousValues;
}

export interface ActivitySkillSubscriptionPayloadPromise
  extends Promise<ActivitySkillSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ActivitySkillPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ActivitySkillPreviousValuesPromise>() => T;
}

export interface ActivitySkillSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ActivitySkillSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ActivitySkillSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ActivitySkillPreviousValuesSubscription>() => T;
}

export interface UserSkillSubscriptionPayload {
  mutation: MutationType;
  node: UserSkill;
  updatedFields: String[];
  previousValues: UserSkillPreviousValues;
}

export interface UserSkillSubscriptionPayloadPromise
  extends Promise<UserSkillSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserSkillPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserSkillPreviousValuesPromise>() => T;
}

export interface UserSkillSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSkillSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSkillSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserSkillPreviousValuesSubscription>() => T;
}

export interface ActivitySkillPreviousValues {
  id: ID_Output;
  level: Int;
}

export interface ActivitySkillPreviousValuesPromise
  extends Promise<ActivitySkillPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  level: () => Promise<Int>;
}

export interface ActivitySkillPreviousValuesSubscription
  extends Promise<AsyncIterator<ActivitySkillPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  level: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateSkill {
  count: Int;
}

export interface AggregateSkillPromise
  extends Promise<AggregateSkill>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSkillSubscription
  extends Promise<AsyncIterator<AggregateSkill>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ActivitySkill {
  id: ID_Output;
  level: Int;
}

export interface ActivitySkillPromise
  extends Promise<ActivitySkill>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  level: () => Promise<Int>;
  skill: <T = SkillPromise>() => T;
  owner: <T = ActivityPromise>() => T;
}

export interface ActivitySkillSubscription
  extends Promise<AsyncIterator<ActivitySkill>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  level: () => Promise<AsyncIterator<Int>>;
  skill: <T = SkillSubscription>() => T;
  owner: <T = ActivitySubscription>() => T;
}

export interface ActivitySkillNullablePromise
  extends Promise<ActivitySkill | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  level: () => Promise<Int>;
  skill: <T = SkillPromise>() => T;
  owner: <T = ActivityPromise>() => T;
}

export interface AggregateProject {
  count: Int;
}

export interface AggregateProjectPromise
  extends Promise<AggregateProject>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProjectSubscription
  extends Promise<AsyncIterator<AggregateProject>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProfileSubscriptionPayload {
  mutation: MutationType;
  node: Profile;
  updatedFields: String[];
  previousValues: ProfilePreviousValues;
}

export interface ProfileSubscriptionPayloadPromise
  extends Promise<ProfileSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProfilePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProfilePreviousValuesPromise>() => T;
}

export interface ProfileSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProfileSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProfileSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProfilePreviousValuesSubscription>() => T;
}

export interface AggregateProfile {
  count: Int;
}

export interface AggregateProfilePromise
  extends Promise<AggregateProfile>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProfileSubscription
  extends Promise<AsyncIterator<AggregateProfile>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateActivitySkill {
  count: Int;
}

export interface AggregateActivitySkillPromise
  extends Promise<AggregateActivitySkill>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateActivitySkillSubscription
  extends Promise<AsyncIterator<AggregateActivitySkill>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProjectPreviousValues {
  id: ID_Output;
  name: String;
  description: String;
  startDate: DateTimeOutput;
  endDate?: DateTimeOutput;
}

export interface ProjectPreviousValuesPromise
  extends Promise<ProjectPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  startDate: () => Promise<DateTimeOutput>;
  endDate: () => Promise<DateTimeOutput>;
}

export interface ProjectPreviousValuesSubscription
  extends Promise<AsyncIterator<ProjectPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  startDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  endDate: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProjectSubscriptionPayload {
  mutation: MutationType;
  node: Project;
  updatedFields: String[];
  previousValues: ProjectPreviousValues;
}

export interface ProjectSubscriptionPayloadPromise
  extends Promise<ProjectSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProjectPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProjectPreviousValuesPromise>() => T;
}

export interface ProjectSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProjectSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProjectSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProjectPreviousValuesSubscription>() => T;
}

export interface SkillSubscriptionPayload {
  mutation: MutationType;
  node: Skill;
  updatedFields: String[];
  previousValues: SkillPreviousValues;
}

export interface SkillSubscriptionPayloadPromise
  extends Promise<SkillSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SkillPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SkillPreviousValuesPromise>() => T;
}

export interface SkillSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SkillSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SkillSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SkillPreviousValuesSubscription>() => T;
}

export interface ProfilePreviousValues {
  firstName: String;
  lastName: String;
  title?: String;
  user: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ProfilePreviousValuesPromise
  extends Promise<ProfilePreviousValues>,
    Fragmentable {
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  title: () => Promise<String>;
  user: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProfilePreviousValuesSubscription
  extends Promise<AsyncIterator<ProfilePreviousValues>>,
    Fragmentable {
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  user: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSkillEdge {
  node: UserSkill;
  cursor: String;
}

export interface UserSkillEdgePromise
  extends Promise<UserSkillEdge>,
    Fragmentable {
  node: <T = UserSkillPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserSkillEdgeSubscription
  extends Promise<AsyncIterator<UserSkillEdge>>,
    Fragmentable {
  node: <T = UserSkillSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ProfileConnection {
  pageInfo: PageInfo;
  edges: ProfileEdge[];
}

export interface ProfileConnectionPromise
  extends Promise<ProfileConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProfileEdge>>() => T;
  aggregate: <T = AggregateProfilePromise>() => T;
}

export interface ProfileConnectionSubscription
  extends Promise<AsyncIterator<ProfileConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProfileEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProfileSubscription>() => T;
}

export interface ProjectConnection {
  pageInfo: PageInfo;
  edges: ProjectEdge[];
}

export interface ProjectConnectionPromise
  extends Promise<ProjectConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProjectEdge>>() => T;
  aggregate: <T = AggregateProjectPromise>() => T;
}

export interface ProjectConnectionSubscription
  extends Promise<AsyncIterator<ProjectConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProjectEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProjectSubscription>() => T;
}

export interface SkillConnection {
  pageInfo: PageInfo;
  edges: SkillEdge[];
}

export interface SkillConnectionPromise
  extends Promise<SkillConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SkillEdge>>() => T;
  aggregate: <T = AggregateSkillPromise>() => T;
}

export interface SkillConnectionSubscription
  extends Promise<AsyncIterator<SkillConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SkillEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSkillSubscription>() => T;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Profile",
    embedded: false
  },
  {
    name: "Skill",
    embedded: false
  },
  {
    name: "ActivitySkill",
    embedded: false
  },
  {
    name: "UserSkill",
    embedded: false
  },
  {
    name: "Activity",
    embedded: false
  },
  {
    name: "Project",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4467`
});
export const prisma = new Prisma();
